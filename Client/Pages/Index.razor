@page "/message"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>
<div class="form-group">
	<label>
		User:
		<input @bind="userInput" />
	</label>
</div>
<div class="form-group">
	<label>
		Message:
		<input @bind-value="@messageInput" size="50" />
	</label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)" hidden="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
	@foreach (var message in messages)
	{
		<li>@message</li>
	}
</ul>

@code {
	private static HubConnection? hubConnection;
	private static HubConnection? hubConnectionSync;
	private List<string> messages = new List<string>();
	private static string? userInput;
	public static string? messageInput;

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/dthub"))
			.Build();
		hubConnectionSync = new HubConnectionBuilder()
		.WithUrl(Navigation.ToAbsoluteUri("/synchub"))
		.Build();

		hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
		{
			var encodedMsg = $"{user}: {message}";
			messages.Add(encodedMsg);
			StateHasChanged();
		});
		hubConnectionSync.On<bool>("ReceiveSync", (sync) =>
		{
			if (sync)
				StateHasChanged();
		});

		await hubConnection.StartAsync();
		await hubConnectionSync.StartAsync();
	}

	private async Task Send()
	{
		if (hubConnection is not null)
		{
			await hubConnection.SendAsync("SendMessage", userInput, messageInput);
		}
		messageInput = "sdfsd";

	}

	public static async void Sync()
	{
		if (hubConnectionSync is not null)
		{
			await hubConnectionSync.SendAsync("SendSync", true);
		}
	}

	public bool IsConnected =>
		hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
